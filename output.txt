1. Database Creation

Query:

CREATE TABLE Students (
    StudentID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(50) NOT NULL,
    Gender CHAR(1) CHECK (Gender IN ('M', 'F')),
    Age INT CHECK (Age > 0),
    Grade VARCHAR(10),
    MathScore INT CHECK (MathScore BETWEEN 0 AND 100),
    ScienceScore INT CHECK (ScienceScore BETWEEN 0 AND 100),
    EnglishScore INT CHECK (EnglishScore BETWEEN 0 AND 100)
);

Purpose:

This query creates a table named Students with columns for storing student information, including their ID, name, gender, age, grade, and scores in three subjects. Constraints ensure valid data entry.

2. Data Insertion

Query:

INSERT INTO Students (Name, Gender, Age, Grade, MathScore, ScienceScore, EnglishScore) VALUES
('Ruturaj Gaikwad', 'M', 19, 'A', 88, 91, 85),
('Shivam Dube', 'M', 20, 'B', 79, 82, 80),
('Ravindra Jadeja', 'M', 18, 'C', 67, 72, 70),
('Matheesha Pathirana', 'M', 21, 'A', 92, 95, 90),
('MS Dhoni', 'M', 19, 'A', 85, 80, 86),
('Devon Conway', 'M', 18, 'A', 94, 98, 96),
('Khushboo', 'F', 22, 'C', 61, 65, 63),
('Rachin Ravindra', 'M', 20, 'B', 83, 87, 89),
('Aparna', 'F', 20, 'B', 83, 87, 89),
('Deepak Hooda', 'M', 19, 'A', 99, 96, 97);

Purpose:

This query inserts 10 student records into the Students table.

3. Displaying All Students

Query:

SELECT * FROM Students;

Purpose:

Retrieves all records from the Students table.

4. Finding the Student with the Highest Total Score

Query:

SELECT Name, Gender, Age, Grade, MathScore, ScienceScore, EnglishScore,
       (MathScore + ScienceScore + EnglishScore) AS TotalScore
FROM Students
ORDER BY TotalScore DESC
LIMIT 1;

Purpose:

Calculates the total score for each student and retrieves the student with the highest total score.

5. Counting Students by Grade

Query:

SELECT Grade, COUNT(*) AS StudentCount
FROM Students
GROUP BY Grade
ORDER BY Grade;

Purpose:

Counts the number of students in each grade and orders the results by grade.

6. Finding Average Scores by Gender

Query:

SELECT Gender,
       ROUND(AVG(MathScore), 2) AS Avg_Math_Score,
       ROUND(AVG(ScienceScore), 2) AS Avg_Science_Score,
       ROUND(AVG(EnglishScore), 2) AS Avg_English_Score,
       ROUND(AVG((MathScore + ScienceScore + EnglishScore)/3), 2) AS Overall_Avg_Score
FROM Students
GROUP BY Gender;

Purpose:

Calculates and displays the average scores in each subject for male and female students.

7. Finding Students with Math Score Above 80

Query:

SELECT *
FROM Students
WHERE MathScore > 80
ORDER BY MathScore DESC;

Purpose:

Retrieves all students who have scored more than 80 in Math, ordered by their scores in descending order.

8. Updating a Student's Grade

Query:

UPDATE Students
SET Grade = 'A'
WHERE StudentID = 5;

Purpose:

Updates the grade of the student with StudentID = 5 to 'A'.

9. Verifying the Update

Query:

SELECT * FROM Students WHERE StudentID = 5;

Purpose:

Retrieves the updated record to verify that the grade has been successfully changed.

Observations and Insights:

Highest Score: The student with the highest total score is Deepak Hooda.

Grade Distribution: Most students belong to grades A and B, with fewer students in grade C.

Gender-wise Performance: The average scores of male and female students can be analyzed for trends.

Math Performance: Several students have scored above 80 in Math, indicating strong performance in this subject.

Grade Update: The update operation successfully modifies a student's grade, demonstrating the ability to manipulate data within the database.

